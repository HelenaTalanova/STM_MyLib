/* Define to prevent recursive inclusion -------------------------------------*/

#ifndef __UART_H
#define __UART_H

#ifdef __cplusplus
extern "C" {
#endif
	
	typedef enum xHAL_UART_MODE {
		MODE_RX_NO__TX_NO = 0U,
		MODE_RX_NO__TX_YES = USART_CR1_TE,
		MODE_RX_NO__TX_DMA = USART_CR1_TE | USART_CR3_DMAT,

		MODE_RX_YES__TX_NO = USART_CR1_RE,
		MODE_RX_YES__TX_YES = USART_CR1_RE | USART_CR1_TE,
		MODE_RX_YES__TX_DMA = USART_CR1_RE | USART_CR1_TE | USART_CR3_DMAT,

		MODE_RX_DMA__TX_NO = USART_CR1_RE | USART_CR3_DMAR,
		MODE_RX_DMA__TX_YES = USART_CR1_RE | USART_CR3_DMAR | USART_CR1_TE,
		MODE_RX_DMA__TX_DMA = USART_CR1_RE | USART_CR3_DMAR | USART_CR1_TE | USART_CR3_DMAT,
	}xHAL_UART_MODE;
	
	typedef enum xHAL_UART_WORD_LENGHT {
		WORD_LENGHT_8 = 0x00,
		WORD_LENGHT_9 = USART_CR1_M,
	}xHAL_UART_WORD_LENGHT;

	typedef enum xHAL_UART_PARITY {
		PARITY_NO = 0x00,
		PARITY_EVEN = USART_CR1_PCE,
		PARITY_ODD = USART_CR1_PCE | USART_CR1_PS,
	}xHAL_UART_PARITY;

	typedef enum xHAL_UART_STOP_BYTE {
		STOP_BYTE_1 = 0x00,
		STOP_BYTE_0_5 = USART_CR2_STOP_0,
		STOP_BYTE_1_5 = USART_CR2_STOP_0 | USART_CR2_STOP_1,
	}xHAL_UART_STOP_BYTE;

	typedef enum xHAL_UART_FRAME_FORMAT {
		FRAME_FORMAT_7_EVEN_0_5 = WORD_LENGHT_8 | PARITY_EVEN | STOP_BYTE_0_5,
		FRAME_FORMAT_7_EVEN_1 = WORD_LENGHT_8 | PARITY_EVEN | STOP_BYTE_1,
		FRAME_FORMAT_7_EVEN_1_5 = WORD_LENGHT_8 | PARITY_EVEN | STOP_BYTE_1_5,

		FRAME_FORMAT_7_ODD_0_5 = WORD_LENGHT_8 | PARITY_ODD | STOP_BYTE_0_5,
		FRAME_FORMAT_7_ODD_1 = WORD_LENGHT_8 | PARITY_ODD | STOP_BYTE_1,
		FRAME_FORMAT_7_ODD_1_5 = WORD_LENGHT_8 | PARITY_ODD | STOP_BYTE_1_5,

		FRAME_FORMAT_8_NO_0_5 = WORD_LENGHT_8 | PARITY_NO | STOP_BYTE_0_5,
		FRAME_FORMAT_8_NO_1 = WORD_LENGHT_8 | PARITY_NO | STOP_BYTE_1,
		FRAME_FORMAT_8_NO_1_5 = WORD_LENGHT_8 | PARITY_NO | STOP_BYTE_1_5,

		FRAME_FORMAT_8_EVEN_0_5 = WORD_LENGHT_9 | PARITY_EVEN | STOP_BYTE_0_5,
		FRAME_FORMAT_8_EVEN_1 = WORD_LENGHT_9 | PARITY_EVEN | STOP_BYTE_1,
		FRAME_FORMAT_8_EVEN_1_5 = WORD_LENGHT_9 | PARITY_EVEN | STOP_BYTE_1_5,

		FRAME_FORMAT_8_ODD_0_5 = WORD_LENGHT_9 | PARITY_ODD | STOP_BYTE_0_5,
		FRAME_FORMAT_8_ODD_1 = WORD_LENGHT_9 | PARITY_ODD | STOP_BYTE_1,
		FRAME_FORMAT_8_ODD_1_5 = WORD_LENGHT_9 | PARITY_ODD | STOP_BYTE_1_5,

		FRAME_FORMAT_9_NO_0_5 = WORD_LENGHT_9 | PARITY_NO | STOP_BYTE_0_5,
		FRAME_FORMAT_9_MO_1 = WORD_LENGHT_9 | PARITY_NO | STOP_BYTE_1,
		FRAME_FORMAT_9_NO_1_5 = WORD_LENGHT_9 | PARITY_NO | STOP_BYTE_1_5,
	}xHAL_UART_FRAME_FORMAT;

	typedef enum xHAL_UART_FLOW_CONTROL	{
		FLOW_CONTROL_NO = 0UL,
		FLOW_CONTROL_RTS = USART_CR3_RTSE,
		FLOW_CONTROL_CTS = USART_CR3_CTSE,
		FLOW_CONTROL_RTS_CTS = USART_CR3_RTSE | USART_CR3_CTSE,
	}xHAL_UART_FLOW_CONTROL;

	typedef void(*xHAL_UART_Handle)(void);
	
	typedef struct xHAL_UART_INTERRYPTS	{	
		xHAL_UART_Handle TXE_Transmit_DataRegEmpty;
		xHAL_UART_Handle CTS_flag;
		xHAL_UART_Handle TXC_Transmission_Complete;
		xHAL_UART_Handle RXNE_Received_DataReadyToBeRead;
		xHAL_UART_Handle ORE_EverrunErrorDetected;
		xHAL_UART_Handle IDLE_IdleLineDetected;
		xHAL_UART_Handle PE_ParityError;
		xHAL_UART_Handle LBD_BreakFlag;
		xHAL_UART_Handle EIE_Error_NE_ORE_FE;
		int32_t priority;
	}xHAL_UART_INTERRYPTS;
	
	typedef struct
	{			
		USART_TypeDef* UARTx;
		uint32_t baudrate;
		xHAL_UART_MODE mode;						
		xHAL_UART_FRAME_FORMAT frame_format;
		xHAL_UART_FLOW_CONTROL flow_control;
		xHAL_UART_INTERRYPTS handle;
	}xHAL_UART_Config;

	void xHAL_UART_Init(xHAL_UART_Config* config);
	void xHAL_UART_DeInit(USART_TypeDef* UARTx);
	void xHAL_UART_Start(USART_TypeDef* UARTx);
	void xHAL_UART_Stop(USART_TypeDef* UARTx);		
	
#ifdef __cplusplus
}
#endif

#endif // __UART_H
